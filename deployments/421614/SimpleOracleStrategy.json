{
  "address": "0x9D9cdcD693bc9aC4EbbD2e190F3cd616Ede02061",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "referenceOracle_",
          "type": "address"
        },
        {
          "internalType": "contract IRebalancer",
          "name": "rebalancer_",
          "type": "address"
        },
        {
          "internalType": "contract IBookManager",
          "name": "bookManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ExceedsThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidConfig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOraclePrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTick",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "Unpause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "referenceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rebalanceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdB",
              "type": "uint24"
            }
          ],
          "indexed": false,
          "internalType": "struct ISimpleOracleStrategy.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "UpdateConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oraclePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "Tick",
          "name": "tickA",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "Tick",
          "name": "tickB",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "UpdatePosition",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LAST_RAW_AMOUNT_MASK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bookManager",
      "outputs": [
        {
          "internalType": "contract IBookManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "burnHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "computeOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "rawAmount",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStrategy.Order[]",
          "name": "ordersA",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "rawAmount",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStrategy.Order[]",
          "name": "ordersB",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "referenceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rebalanceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdB",
              "type": "uint24"
            }
          ],
          "internalType": "struct ISimpleOracleStrategy.Config",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getLastRawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "paused",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "oraclePrice",
              "type": "uint128"
            },
            {
              "internalType": "uint24",
              "name": "rate",
              "type": "uint24"
            },
            {
              "internalType": "Tick",
              "name": "tickA",
              "type": "int24"
            },
            {
              "internalType": "Tick",
              "name": "tickB",
              "type": "int24"
            }
          ],
          "internalType": "struct ISimpleOracleStrategy.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "isOraclePriceValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintHook",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "rawAmount",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStrategy.Order[]",
          "name": "liquidityA",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "rawAmount",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStrategy.Order[]",
          "name": "liquidityB",
          "type": "tuple[]"
        }
      ],
      "name": "rebalanceHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalancer",
      "outputs": [
        {
          "internalType": "contract IRebalancer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referenceOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "referenceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rebalanceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdB",
              "type": "uint24"
            }
          ],
          "internalType": "struct ISimpleOracleStrategy.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "oraclePrice",
          "type": "uint256"
        },
        {
          "internalType": "Tick",
          "name": "tickA",
          "type": "int24"
        },
        {
          "internalType": "Tick",
          "name": "tickB",
          "type": "int24"
        },
        {
          "internalType": "uint24",
          "name": "rate",
          "type": "uint24"
        }
      ],
      "name": "updatePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd580cb5853a6dfe8607898d19fe96e3ad496fe85c80c79c24fbba7b653e9544",
  "receipt": {
    "to": null,
    "from": "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49",
    "contractAddress": "0x9D9cdcD693bc9aC4EbbD2e190F3cd616Ede02061",
    "transactionIndex": 1,
    "gasUsed": "2996724",
    "logsBloom": "0x
    "blockHash": "0x77b7816fbab1fe695a07320ed22d4245d91fcebdcab262cc86d0d4433ab75306",
    "transactionHash": "0xcd580cb5853a6dfe8607898d19fe96e3ad496fe85c80c79c24fbba7b653e9544",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 92920750,
        "transactionHash": "0xcd580cb5853a6dfe8607898d19fe96e3ad496fe85c80c79c24fbba7b653e9544",
        "address": "0x9D9cdcD693bc9aC4EbbD2e190F3cd616Ede02061",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f79ee8f8fa862e98201120d83c4ec39d9468d49"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x77b7816fbab1fe695a07320ed22d4245d91fcebdcab262cc86d0d4433ab75306"
      }
    ],
    "blockNumber": 92920750,
    "cumulativeGasUsed": "2996724",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf488A6499259299d371B00a16C1e8FAFf8Ce5399",
    "0x704525EAB4C7A692c30A32AECe04f36AcfBA360A",
    "0xAA9575d63dFC224b9583fC303dB3188C08d5C85A",
    "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49"
  ],
  "numDeployments": 1,
  "solcInputHash": "3211ad8134659acdd9c259be0939c590",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"referenceOracle_\",\"type\":\"address\"},{\"internalType\":\"contract IRebalancer\",\"name\":\"rebalancer_\",\"type\":\"address\"},{\"internalType\":\"contract IBookManager\",\"name\":\"bookManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExceedsThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOraclePrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTick\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"referenceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rebalanceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdB\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"struct ISimpleOracleStrategy.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"UpdateConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"Tick\",\"name\":\"tickA\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"Tick\",\"name\":\"tickB\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"UpdatePosition\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LAST_RAW_AMOUNT_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bookManager\",\"outputs\":[{\"internalType\":\"contract IBookManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTotalSupply\",\"type\":\"uint256\"}],\"name\":\"burnHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"computeOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"}],\"internalType\":\"struct IStrategy.Order[]\",\"name\":\"ordersA\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"}],\"internalType\":\"struct IStrategy.Order[]\",\"name\":\"ordersB\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"referenceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rebalanceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdB\",\"type\":\"uint24\"}],\"internalType\":\"struct ISimpleOracleStrategy.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getLastRawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"oraclePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint24\",\"name\":\"rate\",\"type\":\"uint24\"},{\"internalType\":\"Tick\",\"name\":\"tickA\",\"type\":\"int24\"},{\"internalType\":\"Tick\",\"name\":\"tickB\",\"type\":\"int24\"}],\"internalType\":\"struct ISimpleOracleStrategy.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"isOraclePriceValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintHook\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"}],\"internalType\":\"struct IStrategy.Order[]\",\"name\":\"liquidityA\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"}],\"internalType\":\"struct IStrategy.Order[]\",\"name\":\"liquidityB\",\"type\":\"tuple[]\"}],\"name\":\"rebalanceHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"contract IRebalancer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referenceOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"referenceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rebalanceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdB\",\"type\":\"uint24\"}],\"internalType\":\"struct ISimpleOracleStrategy.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"tickA\",\"type\":\"int24\"},{\"internalType\":\"Tick\",\"name\":\"tickB\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"rate\",\"type\":\"uint24\"}],\"name\":\"updatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"computeOrders(bytes32)\":{\"details\":\"Clears pool orders if an error occurs and retains current orders if the list is empty.\",\"params\":{\"key\":\"The key of the pool.\"},\"returns\":{\"ordersA\":\"The orders for the first token.\",\"ordersB\":\"The orders for the second token.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeOrders(bytes32)\":{\"notice\":\"Retrieves the orders for a specified key.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/SimpleOracleStrategy.sol\":\"SimpleOracleStrategy\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This extension of the {Ownable} contract includes a two-step mechanism to transfer\\n * ownership, where the new owner must call {acceptOwnership} in order to replace the\\n * old one. This can help prevent common mistakes, such as transfers of ownership to\\n * incorrect accounts, or to contracts that are unable to interact with the\\n * permission system.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x08b074ae1b12e70ce24d1335086ec5a418934311a6771d9f61fe24d392050e12\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IBookManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {BookId} from \\\"../libraries/BookId.sol\\\";\\nimport {Currency} from \\\"../libraries/Currency.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\nimport {Tick} from \\\"../libraries/Tick.sol\\\";\\nimport {FeePolicy} from \\\"../libraries/FeePolicy.sol\\\";\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {IHooks} from \\\"./IHooks.sol\\\";\\n\\n/**\\n * @title IBookManager\\n * @notice The interface for the BookManager contract\\n */\\ninterface IBookManager is IERC721Metadata, IERC721Permit {\\n    error InvalidUnitSize();\\n    error InvalidFeePolicy();\\n    error InvalidProvider(address provider);\\n    error LockedBy(address locker, address hook);\\n    error CurrencyNotSettled();\\n\\n    /**\\n     * @notice Event emitted when a new book is opened\\n     * @param id The book id\\n     * @param base The base currency\\n     * @param quote The quote currency\\n     * @param unitSize The unit size of the book\\n     * @param makerPolicy The maker fee policy\\n     * @param takerPolicy The taker fee policy\\n     * @param hooks The hooks contract\\n     */\\n    event Open(\\n        BookId indexed id,\\n        Currency indexed base,\\n        Currency indexed quote,\\n        uint64 unitSize,\\n        FeePolicy makerPolicy,\\n        FeePolicy takerPolicy,\\n        IHooks hooks\\n    );\\n\\n    /**\\n     * @notice Event emitted when a new order is made\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param orderIndex The order index\\n     * @param unit The order unit\\n     * @param provider The provider address\\n     */\\n    event Make(\\n        BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 unit, address provider\\n    );\\n\\n    /**\\n     * @notice Event emitted when an order is taken\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param unit The order unit\\n     */\\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when an order is canceled\\n     * @param orderId The order id\\n     * @param unit The canceled unit\\n     */\\n    event Cancel(OrderId indexed orderId, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when an order is claimed\\n     * @param orderId The order id\\n     * @param unit The claimed unit\\n     */\\n    event Claim(OrderId indexed orderId, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when a provider is whitelisted\\n     * @param provider The provider address\\n     */\\n    event Whitelist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider is delisted\\n     * @param provider The provider address\\n     */\\n    event Delist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider collects fees\\n     * @param provider The provider address\\n     * @param recipient The recipient address\\n     * @param currency The currency\\n     * @param amount The collected amount\\n     */\\n    event Collect(address indexed provider, address indexed recipient, Currency indexed currency, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when new default provider is set\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    event SetDefaultProvider(address indexed newDefaultProvider);\\n\\n    /**\\n     * @notice This structure represents a unique identifier for a book in the BookManager.\\n     * @param base The base currency of the book\\n     * @param unitSize The unit size of the book\\n     * @param quote The quote currency of the book\\n     * @param makerPolicy The maker fee policy of the book\\n     * @param hooks The hooks contract of the book\\n     * @param takerPolicy The taker fee policy of the book\\n     */\\n    struct BookKey {\\n        Currency base;\\n        uint64 unitSize;\\n        Currency quote;\\n        FeePolicy makerPolicy;\\n        IHooks hooks;\\n        FeePolicy takerPolicy;\\n    }\\n\\n    /**\\n     * @notice Returns the base URI\\n     * @return The base URI\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI\\n     * @return The contract URI\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the default provider\\n     * @return The default provider\\n     */\\n    function defaultProvider() external view returns (address);\\n\\n    /**\\n     * @notice Returns the total reserves of a given currency\\n     * @param currency The currency in question\\n     * @return The total reserves amount\\n     */\\n    function reservesOf(Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a provider is whitelisted\\n     * @param provider The address of the provider\\n     * @return True if the provider is whitelisted, false otherwise\\n     */\\n    function isWhitelisted(address provider) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies if an owner has authorized a spender for a token\\n     * @param owner The address of the token owner\\n     * @param spender The address of the spender\\n     * @param tokenId The token ID\\n     */\\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\\n\\n    /**\\n     * @notice Calculates the amount owed to a provider in a given currency\\n     * @param provider The provider's address\\n     * @param currency The currency in question\\n     * @return The owed amount\\n     */\\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the currency balance changes for a given locker\\n     * @param locker The address of the locker\\n     * @param currency The currency in question\\n     * @return The net change in currency balance\\n     */\\n    function getCurrencyDelta(address locker, Currency currency) external view returns (int256);\\n\\n    /**\\n     * @notice Retrieves the book key for a given book ID\\n     * @param id The book ID\\n     * @return The book key\\n     */\\n    function getBookKey(BookId id) external view returns (BookKey memory);\\n\\n    /**\\n     * @notice This structure represents a current status for an order in the BookManager.\\n     * @param provider The provider of the order\\n     * @param open The open unit of the order\\n     * @param claimable The claimable unit of the order\\n     */\\n    struct OrderInfo {\\n        address provider;\\n        uint64 open;\\n        uint64 claimable;\\n    }\\n\\n    /**\\n     * @notice Provides information about an order\\n     * @param id The order ID\\n     * @return Order information including provider, open status, and claimable unit\\n     */\\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\\n\\n    /**\\n     * @notice Retrieves the locker and caller addresses for a given lock\\n     * @param i The index of the lock\\n     * @return locker The locker's address\\n     * @return lockCaller The caller's address\\n     */\\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\\n\\n    /**\\n     * @notice Provides the lock data\\n     * @return The lock data including necessary numeric values\\n     */\\n    function getLockData() external view returns (uint128, uint128);\\n\\n    /**\\n     * @notice Returns the depth of a given book ID and tick\\n     * @param id The book ID\\n     * @param tick The tick\\n     * @return The depth of the tick\\n     */\\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\\n\\n    /**\\n     * @notice Retrieves the highest tick for a given book ID\\n     * @param id The book ID\\n     * @return tick The highest tick\\n     */\\n    function getHighest(BookId id) external view returns (Tick tick);\\n\\n    /**\\n     * @notice Finds the maximum tick less than a specified tick in a book\\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the lowest\\n     * @param id The book ID\\n     * @param tick The specified tick\\n     * @return The next lower tick\\n     */\\n    function maxLessThan(BookId id, Tick tick) external view returns (Tick);\\n\\n    /**\\n     * @notice Checks if a book is opened\\n     * @param id The book ID\\n     * @return True if the book is opened, false otherwise\\n     */\\n    function isOpened(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if a book is empty\\n     * @param id The book ID\\n     * @return True if the book is empty, false otherwise\\n     */\\n    function isEmpty(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Encodes a BookKey into a BookId\\n     * @param key The BookKey to encode\\n     * @return The encoded BookId\\n     */\\n    function encodeBookKey(BookKey calldata key) external pure returns (BookId);\\n\\n    /**\\n     * @notice Loads a value from a specific storage slot\\n     * @param slot The storage slot\\n     * @return The value in the slot\\n     */\\n    function load(bytes32 slot) external view returns (bytes32);\\n\\n    /**\\n     * @notice Loads a sequence of values starting from a specific slot\\n     * @param startSlot The starting slot\\n     * @param nSlot The number of slots to load\\n     * @return The sequence of values\\n     */\\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Opens a new book\\n     * @param key The book key\\n     * @param hookData The hook data\\n     */\\n    function open(BookKey calldata key, bytes calldata hookData) external;\\n\\n    /**\\n     * @notice Locks a book manager function\\n     * @param locker The locker address\\n     * @param data The lock data\\n     * @return The lock return data\\n     */\\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\\n\\n    /**\\n     * @notice This structure represents the parameters for making an order.\\n     * @param key The book key for the order\\n     * @param tick The tick for the order\\n     * @param unit The unit for the order. Times key.unitSize to get actual bid amount.\\n     * @param provider The provider for the order. The limit order service provider address to collect fees.\\n     */\\n    struct MakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 unit;\\n        address provider;\\n    }\\n\\n    /**\\n     * @notice Make a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return id The order id. Returns 0 if the order is not settled\\n     * @return quoteAmount The amount of quote currency to be paid\\n     */\\n    function make(MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (OrderId id, uint256 quoteAmount);\\n\\n    /**\\n     * @notice This structure represents the parameters for taking orders in the specified tick.\\n     * @param key The book key for the order\\n     * @param tick The tick for the order\\n     * @param maxUnit The max unit to take\\n     */\\n    struct TakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 maxUnit;\\n    }\\n\\n    /**\\n     * @notice Take a limit order at specific tick\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return quoteAmount The amount of quote currency to be received\\n     * @return baseAmount The amount of base currency to be paid\\n     */\\n    function take(TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (uint256 quoteAmount, uint256 baseAmount);\\n\\n    /**\\n     * @notice This structure represents the parameters for canceling an order.\\n     * @param id The order id for the order\\n     * @param toUnit The remaining open unit for the order after cancellation. Must not exceed the current open unit.\\n     */\\n    struct CancelParams {\\n        OrderId id;\\n        uint64 toUnit;\\n    }\\n\\n    /**\\n     * @notice Cancel a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return canceledAmount The amount of quote currency canceled\\n     */\\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\\n\\n    /**\\n     * @notice Claims an order\\n     * @param id The order ID\\n     * @param hookData The hook data\\n     * @return claimedAmount The amount claimed\\n     */\\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\\n\\n    /**\\n     * @notice Collects fees from a provider\\n     * @param recipient The recipient address\\n     * @param currency The currency\\n     * @return The collected amount\\n     */\\n    function collect(address recipient, Currency currency) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraws a currency\\n     * @param currency The currency\\n     * @param to The recipient address\\n     * @param amount The amount\\n     */\\n    function withdraw(Currency currency, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Settles a currency\\n     * @param currency The currency\\n     * @return The settled amount\\n     */\\n    function settle(Currency currency) external payable returns (uint256);\\n\\n    /**\\n     * @notice Whitelists a provider\\n     * @param provider The provider address\\n     */\\n    function whitelist(address provider) external;\\n\\n    /**\\n     * @notice Delists a provider\\n     * @param provider The provider address\\n     */\\n    function delist(address provider) external;\\n\\n    /**\\n     * @notice Sets the default provider\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    function setDefaultProvider(address newDefaultProvider) external;\\n}\\n\",\"keccak256\":\"0xda8dffc751ac3554033e084919f1e431eb2585c80e1e30b9a0198366a8607086\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title IERC721Permit\\n * @notice An interface for the ERC721 permit extension\\n */\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    /**\\n     * @notice The EIP-712 typehash for the permit struct used by the contract\\n     */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /**\\n     * @notice The EIP-712 domain separator for this contract\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Approve the spender to transfer the given tokenId\\n     * @param spender The address to approve\\n     * @param tokenId The tokenId to approve\\n     * @param deadline The deadline for the signature\\n     * @param v The recovery id of the signature\\n     * @param r The r value of the signature\\n     * @param s The s value of the signature\\n     */\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Get the current nonce for a token\\n     * @param tokenId The tokenId to get the nonce for\\n     * @return The current nonce\\n     */\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd6baab4710fa674981395f428bd6550c4e288ac44a1a5d38c2a58fd67234d57e\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\n\\n/**\\n * @title IHooks\\n * @notice Interface for the hooks contract\\n */\\ninterface IHooks {\\n    /**\\n     * @notice Hook called before opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param orderId The id of the order that was made\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterMake(\\n        address sender,\\n        IBookManager.MakeParams calldata params,\\n        OrderId orderId,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param takenUnit The unit that was taken\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterTake(\\n        address sender,\\n        IBookManager.TakeParams calldata params,\\n        uint64 takenUnit,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param canceledUnit The unit that was canceled\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterCancel(\\n        address sender,\\n        IBookManager.CancelParams calldata params,\\n        uint64 canceledUnit,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param claimedUnit The unit that was claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterClaim(address sender, OrderId orderId, uint64 claimedUnit, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbff95e07debd7d51cb3aa79172fd3c31efb57cea1c03d21b5740a565198d8343\",\"license\":\"MIT\"},\"clober-dex/v2-core/libraries/BookId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"../interfaces/IBookManager.sol\\\";\\n\\ntype BookId is uint192;\\n\\nlibrary BookIdLibrary {\\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\\n        bytes32 hash = keccak256(abi.encode(bookKey));\\n        assembly {\\n            id := and(hash, 0xffffffffffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60f9ed99dfb9a5ce14c29359a5ad8b43de0c756e44b2e5f581e8ea6db7cacbeb\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ntype Currency is address;\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    using CurrencyLibrary for Currency;\\n\\n    /// @notice Thrown when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Thrown when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    Currency public constant NATIVE = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // implementation from\\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\\n\\n        bool success;\\n        if (currency.isNative()) {\\n            assembly {\\n                // Transfer the ETH and store if it succeeded or not.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n\\n            if (!success) revert NativeTransferFailed();\\n        } else {\\n            assembly {\\n                // Get a pointer to some free memory.\\n                let freeMemoryPointer := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\\n                    )\\n            }\\n\\n            if (!success) revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isNative()) return address(this).balance;\\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\\n    }\\n\\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(other);\\n    }\\n\\n    function isNative(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0xf04f76015a51981ad0f84fd3ebb0a4eb6c31685604c22584669915aa8dd7ac54\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype FeePolicy is uint24;\\n\\nlibrary FeePolicyLibrary {\\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\\n    int256 internal constant MAX_FEE_RATE = 500000;\\n    int256 internal constant MIN_FEE_RATE = -500000;\\n\\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\\n\\n    error InvalidFeePolicy();\\n\\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\\n            revert InvalidFeePolicy();\\n        }\\n\\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\\n        assembly {\\n            feePolicy := or(mask, add(and(rate_, 0xffffff), MAX_FEE_RATE))\\n        }\\n    }\\n\\n    function isValid(FeePolicy self) internal pure returns (bool) {\\n        int24 r = rate(self);\\n\\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\\n    }\\n\\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\\n        assembly {\\n            f := shr(23, self)\\n        }\\n    }\\n\\n    function rate(FeePolicy self) internal pure returns (int24 r) {\\n        assembly {\\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\\n        }\\n    }\\n\\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 absRate;\\n        unchecked {\\n            absRate = uint256(uint24(positive ? r : -r));\\n        }\\n        // @dev absFee must be less than type(int256).max\\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\\n        fee = positive ? int256(absFee) : -int256(absFee);\\n    }\\n\\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\\n        internal\\n        pure\\n        returns (uint256 originalAmount)\\n    {\\n        int24 r = rate(self);\\n\\n        uint256 divider;\\n        assembly {\\n            if reverseFee { r := sub(0, r) }\\n            divider := add(RATE_PRECISION, r)\\n        }\\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, reverseFee);\\n    }\\n}\\n\",\"keccak256\":\"0xa945c8e3ced4dd6f7be34da0306de74d466bf1a6ea74de5c54672fb49234cfef\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\\n        // In the OrderBook contract code, b is never zero.\\n        assembly {\\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\\n        }\\n    }\\n\\n    /// @dev Returns `ln(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We want to convert `x` from `10**18` fixed point to `2**96` fixed point.\\n            // We do this by multiplying by `2**96 / 10**18`. But since\\n            // `ln(x * C) = ln(x) + ln(C)`, we can simply do nothing here\\n            // and add `ln(2**96 / 10**18)` at the end.\\n\\n            // Compute `k = log2(x) - 96`, `r = 159 - k = 255 - log2(x) = 255 ^ log2(x)`.\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // We place the check here for more optimal stack operations.\\n            if iszero(sgt(x, 0)) {\\n                mstore(0x00, 0x1615e638) // `LnWadUndefined()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // forgefmt: disable-next-item\\n            r := xor(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0xf8f9f9faf9fdfafbf9fdfcfdfafbfcfef9fafdfafcfcfbfefafafcfbffffffff))\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            x := shr(159, shl(r, x))\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // `p` is made monic, we will multiply by a scale factor later.\\n            // forgefmt: disable-next-item\\n            let p := sub( // This heavily nested expression is to avoid stack-too-deep for via-ir.\\n                sar(96, mul(add(43456485725739037958740375743393,\\n                    sar(96, mul(add(24828157081833163892658089445524,\\n                        sar(96, mul(add(3273285459638523848632254066296,\\n                            x), x))), x))), x)), 11111509109440967052023855526967)\\n            p := sub(sar(96, mul(p, x)), 45023709667254063763336534515857)\\n            p := sub(sar(96, mul(p, x)), 14706773417378608786704636184526)\\n            p := sub(mul(p, x), shl(96, 795164235651350426258249787498))\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n\\n            // `q` is monic by convention.\\n            let q := add(5573035233440673466300451813936, x)\\n            q := add(71694874799317883764090561454958, sar(96, mul(x, q)))\\n            q := add(283447036172924575727196451306956, sar(96, mul(x, q)))\\n            q := add(401686690394027663651624208769553, sar(96, mul(x, q)))\\n            q := add(204048457590392012362485061816622, sar(96, mul(x, q)))\\n            q := add(31853899698501571402653359427138, sar(96, mul(x, q)))\\n            q := add(909429971244387300277376558375, sar(96, mul(x, q)))\\n\\n            // `p / q` is in the range `(0, 0.125) * 2**96`.\\n\\n            // Finalization, we need to:\\n            // - Multiply by the scale factor `s = 5.549\\u2026`.\\n            // - Add `ln(2**96 / 10**18)`.\\n            // - Add `k * ln(2)`.\\n            // - Multiply by `10**18 / 2**96 = 5**18 >> 78`.\\n\\n            // The q polynomial is known not to have zeros in the domain.\\n            // No scaling required because p is already `2**96` too large.\\n            p := sdiv(p, q)\\n            // Multiply by the scaling factor: `s * 5**18 * 2**96`, base is now `5**18 * 2**192`.\\n            p := mul(1677202110996718588342820967067443963516166, p)\\n            // Add `ln(2) * k * 5**18 * 2**192`.\\n            // forgefmt: disable-next-item\\n            p := add(mul(16597577552685614221487285958193947469193820559219878177908093499208371, sub(159, r)), p)\\n            // Base conversion: mul `2**96 / (5**18 * 2**192)`.\\n            r := sdiv(p, 302231454903657293676544000000000000000000)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb2dc502dd66a9e36e6c4bb8c4fb3d21120f9f0ff7a934dcfe21ec820cac72275\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/OrderId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Tick} from \\\"./Tick.sol\\\";\\nimport {BookId} from \\\"./BookId.sol\\\";\\n\\ntype OrderId is uint256;\\n\\nlibrary OrderIdLibrary {\\n    /**\\n     * @dev Encode the order id.\\n     * @param bookId The book id.\\n     * @param tick The tick.\\n     * @param index The index.\\n     * @return id The order id.\\n     */\\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\\n        //      Therefore, we have to safely cast tick into uint256 first.\\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\\n        assembly {\\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\\n        }\\n    }\\n\\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\\n        assembly {\\n            bookId := shr(64, id)\\n            tick := and(shr(40, id), 0xffffff)\\n            index := and(id, 0xffffffffff)\\n        }\\n    }\\n\\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\\n        assembly {\\n            bookId := shr(64, id)\\n        }\\n    }\\n\\n    function getTick(OrderId id) internal pure returns (Tick tick) {\\n        assembly {\\n            tick := and(shr(40, id), 0xffffff)\\n        }\\n    }\\n\\n    function getIndex(OrderId id) internal pure returns (uint40 index) {\\n        assembly {\\n            index := and(id, 0xffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78c384badc4971d774987c6f5bce9d578712c7469688735b3c1eafaf2e748fe6\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype Tick is int24;\\n\\nlibrary TickLibrary {\\n    using Math for *;\\n    using TickLibrary for Tick;\\n\\n    error InvalidTick();\\n    error InvalidPrice();\\n    error TickOverflow();\\n\\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\\n    int24 internal constant MIN_TICK = -MAX_TICK;\\n\\n    uint256 internal constant MIN_PRICE = 1350587;\\n    uint256 internal constant MAX_PRICE = 4647684107270898330752324302845848816923571339324334;\\n\\n    uint256 private constant _R0 = 0xfff97272373d413259a46990;\\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357c;\\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624ea;\\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db5883;\\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896;\\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b3;\\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1;\\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b;\\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074c;\\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a39;\\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7f;\\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f7;\\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f;\\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df6;\\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505;\\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54;\\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329;\\n    uint256 private constant _R17 = 0x2216e584f5fa1ea92604;\\n    uint256 private constant _R18 = 0x48a170391f7dc42;\\n    uint256 private constant _R19 = 0x149b34;\\n\\n    function validateTick(Tick tick) internal pure {\\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\\n    }\\n\\n    modifier validatePrice(uint256 price) {\\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\\n        _;\\n    }\\n\\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\\n        unchecked {\\n            int24 tick = int24((int256(price).lnWad() * 42951820407860) / 2 ** 128);\\n            if (toPrice(Tick.wrap(tick)) > price) return Tick.wrap(tick - 1);\\n            return Tick.wrap(tick);\\n        }\\n    }\\n\\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\\n        validateTick(tick);\\n        int24 tickValue = Tick.unwrap(tick);\\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\\n\\n        unchecked {\\n            if (absTick & 0x1 != 0) price = _R0;\\n            else price = 1 << 96;\\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 96;\\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 96;\\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 96;\\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 96;\\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 96;\\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 96;\\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 96;\\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 96;\\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 96;\\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 96;\\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 96;\\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 96;\\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 96;\\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 96;\\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 96;\\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 96;\\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 96;\\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 96;\\n        }\\n        if (tickValue > 0) price = 0x1000000000000000000000000000000000000000000000000 / price;\\n    }\\n\\n    function gt(Tick a, Tick b) internal pure returns (bool) {\\n        return Tick.unwrap(a) > Tick.unwrap(b);\\n    }\\n\\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\\n        return Math.divide((base * tick.toPrice()), 1 << 96, roundingUp);\\n    }\\n\\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\\n        // @dev quote = unit(uint64) * unitSize(uint64) < 2^96\\n        //      We don't need to check overflow here\\n        return Math.divide(quote << 96, tick.toPrice(), roundingUp);\\n    }\\n}\\n\",\"keccak256\":\"0xffbe19efd2b2e4e1eee3ed15c9363f5c45d70a6058b0b85ec9199e34de3b6b9b\",\"license\":\"GPL-2.0-or-later\"},\"src/SimpleOracleStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Ownable, Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {Tick, TickLibrary} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\nimport {IBookManager} from \\\"clober-dex/v2-core/interfaces/IBookManager.sol\\\";\\nimport {FeePolicy, FeePolicyLibrary} from \\\"clober-dex/v2-core/libraries/FeePolicy.sol\\\";\\nimport {BookId} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {Currency, CurrencyLibrary} from \\\"clober-dex/v2-core/libraries/Currency.sol\\\";\\n\\nimport {IStrategy} from \\\"./interfaces/IStrategy.sol\\\";\\nimport {IOracle} from \\\"./interfaces/IOracle.sol\\\";\\nimport {ISimpleOracleStrategy} from \\\"./interfaces/ISimpleOracleStrategy.sol\\\";\\nimport {IRebalancer} from \\\"./interfaces/IRebalancer.sol\\\";\\n\\ncontract SimpleOracleStrategy is ISimpleOracleStrategy, Ownable2Step {\\n    using CurrencyLibrary for Currency;\\n    using FeePolicyLibrary for FeePolicy;\\n    using TickLibrary for Tick;\\n\\n    uint256 public constant RATE_PRECISION = 1e6;\\n    uint256 public constant LAST_RAW_AMOUNT_MASK = (1 << 128) - 1;\\n\\n    IOracle public immutable referenceOracle;\\n    IRebalancer public immutable rebalancer;\\n    IBookManager public immutable bookManager;\\n\\n    mapping(address => bool) public isOperator;\\n    mapping(bytes32 => Config) internal _configs;\\n    mapping(bytes32 => Position) internal _positions;\\n    mapping(bytes32 => uint256) internal _lastRawAmounts;\\n\\n    modifier onlyOperator() {\\n        if (!isOperator[msg.sender]) revert NotOperator();\\n        _;\\n    }\\n\\n    constructor(IOracle referenceOracle_, IRebalancer rebalancer_, IBookManager bookManager_, address initialOwner)\\n        Ownable(initialOwner)\\n    {\\n        referenceOracle = referenceOracle_;\\n        rebalancer = rebalancer_;\\n        bookManager = bookManager_;\\n    }\\n\\n    function getConfig(bytes32 key) external view returns (Config memory) {\\n        return _configs[key];\\n    }\\n\\n    function getPosition(bytes32 key) external view returns (Position memory) {\\n        return _positions[key];\\n    }\\n\\n    function getLastRawAmount(bytes32 key) external view returns (uint256, uint256) {\\n        uint256 lastRawAmounts = _lastRawAmounts[key];\\n        return (lastRawAmounts >> 128, lastRawAmounts & LAST_RAW_AMOUNT_MASK);\\n    }\\n\\n    function computeOrders(bytes32 key) external view returns (Order[] memory ordersA, Order[] memory ordersB) {\\n        Position memory position = _positions[key];\\n        if (position.paused) revert Paused();\\n\\n        Config memory config = _configs[key];\\n\\n        IBookManager.BookKey memory bookKeyA;\\n        IBookManager.BookKey memory bookKeyB;\\n        IRebalancer.Liquidity memory liquidityA;\\n        IRebalancer.Liquidity memory liquidityB;\\n        {\\n            (BookId bookIdA, BookId bookIdB) = rebalancer.getBookPairs(key);\\n            bookKeyA = bookManager.getBookKey(bookIdA);\\n            bookKeyB = bookManager.getBookKey(bookIdB);\\n\\n            (liquidityA, liquidityB) = rebalancer.getLiquidity(key);\\n\\n            uint256 lastRawAmounts = _lastRawAmounts[key];\\n            if (\\n                lastRawAmounts > 0\\n                    && (\\n                        liquidityA.cancelable\\n                            > (lastRawAmounts >> 128) * bookKeyA.unitSize * config.rebalanceThreshold / RATE_PRECISION\\n                            || liquidityB.cancelable\\n                                > (lastRawAmounts & LAST_RAW_AMOUNT_MASK) * bookKeyB.unitSize * config.rebalanceThreshold\\n                                    / RATE_PRECISION\\n                    )\\n            ) {\\n                return (ordersA, ordersB);\\n            }\\n\\n            if (!_isOraclePriceValid(position.oraclePrice, config.referenceThreshold, bookKeyA.quote, bookKeyA.base)) {\\n                revert InvalidOraclePrice();\\n            }\\n        }\\n\\n        (uint256 amountA, uint256 amountB) = _calculateAmounts(\\n            liquidityA.reserve + liquidityA.cancelable + liquidityA.claimable,\\n            liquidityB.reserve + liquidityB.cancelable + liquidityB.claimable,\\n            position.oraclePrice,\\n            _getCurrencyDecimals(bookKeyA.quote),\\n            _getCurrencyDecimals(bookKeyA.base),\\n            config\\n        );\\n\\n        if (bookKeyA.makerPolicy.usesQuote()) amountA = bookKeyA.makerPolicy.calculateOriginalAmount(amountA, false);\\n        if (bookKeyB.makerPolicy.usesQuote()) amountB = bookKeyB.makerPolicy.calculateOriginalAmount(amountB, false);\\n\\n        // SimpleStrategy has only one bid and one ask order\\n        ordersA = new Order[](1);\\n        ordersB = new Order[](1);\\n        ordersA[0] = Order({\\n            tick: position.tickA,\\n            rawAmount: SafeCast.toUint64(amountA * position.rate / bookKeyA.unitSize / RATE_PRECISION)\\n        });\\n        ordersB[0] = Order({\\n            tick: position.tickB,\\n            rawAmount: SafeCast.toUint64(amountB * position.rate / bookKeyB.unitSize / RATE_PRECISION)\\n        });\\n\\n        return (ordersA, ordersB);\\n    }\\n\\n    function _calculateAmounts(\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 oraclePrice,\\n        uint8 decimalsA,\\n        uint8 decimalsB,\\n        Config memory config\\n    ) internal view returns (uint256 resultA, uint256 resultB) {\\n        // @dev Use the same decimals for both amounts to calculate the value properly\\n        if (decimalsA > decimalsB) {\\n            amountB = amountB * 10 ** (decimalsA - decimalsB);\\n        } else if (decimalsA < decimalsB) {\\n            amountA = amountA * 10 ** (decimalsB - decimalsA);\\n        }\\n\\n        resultA = amountA * config.rateA / RATE_PRECISION;\\n        resultB = amountB * config.rateB / RATE_PRECISION;\\n\\n        uint256 basePrice = 10 ** referenceOracle.decimals();\\n        uint256 valueA = resultA * basePrice;\\n        uint256 valueB = resultB * oraclePrice;\\n\\n        if (valueA > valueB) {\\n            resultA = valueB / basePrice;\\n            valueA = resultA * basePrice;\\n        } else {\\n            resultB = valueA / oraclePrice;\\n            valueB = resultB * oraclePrice;\\n        }\\n\\n        if (valueA < amountA * config.minRateA / RATE_PRECISION * basePrice) {\\n            resultA = amountA * config.minRateA / RATE_PRECISION;\\n        }\\n        if (valueB < amountB * config.minRateB / RATE_PRECISION * oraclePrice) {\\n            resultB = amountB * config.minRateB / RATE_PRECISION;\\n        }\\n\\n        // @dev Turn back to original decimals\\n        if (decimalsA > decimalsB) {\\n            resultB = resultB / 10 ** (decimalsA - decimalsB);\\n        } else if (decimalsA < decimalsB) {\\n            resultA = resultA / 10 ** (decimalsB - decimalsA);\\n        }\\n    }\\n\\n    function isOraclePriceValid(bytes32 key) external view returns (bool) {\\n        Config memory config = _configs[key];\\n        Position memory position = _positions[key];\\n\\n        (BookId bookIdA,) = rebalancer.getBookPairs(key);\\n\\n        IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(bookIdA);\\n\\n        return _isOraclePriceValid(position.oraclePrice, config.referenceThreshold, bookKeyA.quote, bookKeyA.base);\\n    }\\n\\n    function _isOraclePriceValid(\\n        uint256 oraclePrice,\\n        uint256 referenceThreshold,\\n        Currency currencyA,\\n        Currency currencyB\\n    ) internal view returns (bool) {\\n        uint256 referencePrice;\\n        address[] memory assets = new address[](2);\\n        assets[0] = Currency.unwrap(currencyA);\\n        assets[1] = Currency.unwrap(currencyB);\\n\\n        try referenceOracle.getAssetsPrices(assets) returns (uint256[] memory prices) {\\n            // price = basePrice / quotePrice\\n            referencePrice = prices[1] * 10 ** referenceOracle.decimals() / prices[0];\\n        } catch {\\n            return false;\\n        }\\n\\n        if (\\n            referencePrice * (RATE_PRECISION + referenceThreshold) / RATE_PRECISION < oraclePrice\\n                || referencePrice * (RATE_PRECISION - referenceThreshold) / RATE_PRECISION > oraclePrice\\n        ) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function isPaused(bytes32 key) external view returns (bool) {\\n        return _positions[key].paused;\\n    }\\n\\n    function pause(bytes32 key) external onlyOperator {\\n        delete _lastRawAmounts[key];\\n        _positions[key].paused = true;\\n        emit Pause(key);\\n    }\\n\\n    function unpause(bytes32 key) external onlyOperator {\\n        _positions[key].paused = false;\\n        emit Unpause(key);\\n    }\\n\\n    function updatePosition(bytes32 key, uint256 oraclePrice, Tick tickA, Tick tickB, uint24 rate)\\n        external\\n        onlyOperator\\n    {\\n        uint256 priceA = tickA.toPrice();\\n        uint256 priceB = Tick.wrap(-Tick.unwrap(tickB)).toPrice();\\n\\n        if (priceA >= priceB) revert InvalidPrice();\\n        if (rate > RATE_PRECISION) revert InvalidValue();\\n\\n        Config memory config = _configs[key];\\n        if (\\n            oraclePrice * (RATE_PRECISION + config.priceThresholdA) / RATE_PRECISION < priceA\\n                || oraclePrice * (RATE_PRECISION - config.priceThresholdB) / RATE_PRECISION > priceB\\n        ) revert ExceedsThreshold();\\n\\n        (BookId bookIdA,) = rebalancer.getBookPairs(key);\\n\\n        IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(bookIdA);\\n        uint8 decimalsA = _getCurrencyDecimals(bookKeyA.quote);\\n        uint8 decimalsB = _getCurrencyDecimals(bookKeyA.base);\\n\\n        // @dev Convert oracle price to the same decimals as the reference oracle\\n        oraclePrice = oraclePrice * 10 ** decimalsB / 10 ** decimalsA;\\n        oraclePrice = (oraclePrice * 10 ** referenceOracle.decimals()) >> 96;\\n\\n        Position memory position = _positions[key];\\n        position.oraclePrice = SafeCast.toUint128(oraclePrice);\\n        position.tickA = tickA;\\n        position.tickB = tickB;\\n        position.rate = rate;\\n\\n        _positions[key] = position;\\n        delete _lastRawAmounts[key];\\n        emit UpdatePosition(key, oraclePrice, tickA, tickB, rate);\\n    }\\n\\n    function setConfig(bytes32 key, Config memory config) external onlyOwner {\\n        if (\\n            config.referenceThreshold > RATE_PRECISION || config.rebalanceThreshold > RATE_PRECISION\\n                || config.rateA > RATE_PRECISION || config.rateB > RATE_PRECISION || config.minRateA > RATE_PRECISION\\n                || config.minRateB > RATE_PRECISION || config.priceThresholdA > RATE_PRECISION\\n                || config.priceThresholdB > RATE_PRECISION\\n        ) revert InvalidConfig();\\n\\n        if (config.rateA < config.minRateA || config.rateB < config.minRateB) revert InvalidConfig();\\n\\n        _configs[key] = config;\\n        emit UpdateConfig(key, config);\\n    }\\n\\n    function setOperator(address operator, bool status) external onlyOwner {\\n        isOperator[operator] = status;\\n        emit SetOperator(operator, status);\\n    }\\n\\n    function _getCurrencyDecimals(Currency currency) internal view returns (uint8) {\\n        return currency.isNative() ? 18 : IERC20Metadata(Currency.unwrap(currency)).decimals();\\n    }\\n\\n    function mintHook(address, bytes32, uint256, uint256) external view {\\n        if (msg.sender != address(rebalancer)) revert InvalidAccess();\\n    }\\n\\n    function burnHook(address, bytes32 key, uint256 burnAmount, uint256 lastTotalSupply) external {\\n        if (msg.sender != address(rebalancer)) revert InvalidAccess();\\n        uint256 lastRawAmounts = _lastRawAmounts[key];\\n        _lastRawAmounts[key] = lastRawAmounts - (((lastRawAmounts >> 128) * burnAmount / lastTotalSupply) << 128)\\n            - (lastRawAmounts & LAST_RAW_AMOUNT_MASK) * burnAmount / lastTotalSupply;\\n    }\\n\\n    function rebalanceHook(address, bytes32 key, Order[] memory liquidityA, Order[] memory liquidityB) external {\\n        if (msg.sender != address(rebalancer)) revert InvalidAccess();\\n        uint256 lastRawAmountA;\\n        uint256 lastRawAmountB;\\n        for (uint256 i = 0; i < liquidityA.length; ++i) {\\n            IStrategy.Order memory order = liquidityA[i];\\n            lastRawAmountA += order.rawAmount;\\n        }\\n\\n        for (uint256 i = 0; i < liquidityB.length; ++i) {\\n            IStrategy.Order memory order = liquidityB[i];\\n            lastRawAmountB += order.rawAmount;\\n        }\\n        _lastRawAmounts[key] = (lastRawAmountA << 128) + lastRawAmountB;\\n    }\\n}\\n\",\"keccak256\":\"0x1cd7138157ef73356bee813ffc7027ca2337e07e38dfdca498d3c720f6c90e40\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Retrieves the number of decimals used by the oracle.\\n     * @return The number of decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Retrieves the price of a specified asset.\\n     * @param asset The address of the asset.\\n     * @return The price of the asset.\\n     */\\n    function getAssetPrice(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the prices of a list of specified assets.\\n     * @param assets The list of asset addresses.\\n     * @return The list of prices for the specified assets.\\n     */\\n    function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x4b76bce6031b418032a070a38263bb2144959794a714886efe166379d42e3cfa\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/IRebalancer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IBookManager} from \\\"clober-dex/v2-core/interfaces/IBookManager.sol\\\";\\nimport {BookId} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {BookId} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {OrderId} from \\\"clober-dex/v2-core/libraries/OrderId.sol\\\";\\n\\nimport {IStrategy} from \\\"./IStrategy.sol\\\";\\n\\ninterface IRebalancer {\\n    struct Pool {\\n        BookId bookIdA;\\n        BookId bookIdB;\\n        IStrategy strategy;\\n        uint256 reserveA;\\n        uint256 reserveB;\\n        OrderId[] orderListA;\\n        OrderId[] orderListB;\\n    }\\n\\n    error NotSelf();\\n    error InvalidHook();\\n    error InvalidStrategy();\\n    error InvalidBookPair();\\n    error AlreadyOpened();\\n    error InvalidLockAcquiredSender();\\n    error InvalidLockCaller();\\n    error LockFailure();\\n    error InvalidMaker();\\n    error InvalidAmount();\\n    error InvalidValue();\\n    error Slippage();\\n\\n    event Open(bytes32 indexed key, BookId indexed bookIdA, BookId indexed bookIdB, bytes32 salt, address strategy);\\n    event Mint(address indexed user, bytes32 indexed key, uint256 amountA, uint256 amountB, uint256 lpAmount);\\n    event Burn(address indexed user, bytes32 indexed key, uint256 amountA, uint256 amountB, uint256 lpAmount);\\n    event Rebalance(bytes32 indexed key);\\n    event Claim(bytes32 indexed key, uint256 claimedAmountA, uint256 claimedAmountB);\\n    event Cancel(bytes32 indexed key, uint256 canceledAmountA, uint256 canceledAmountB);\\n\\n    struct Liquidity {\\n        uint256 reserve;\\n        uint256 claimable;\\n        uint256 cancelable;\\n    }\\n\\n    /**\\n     * @notice Retrieves the book pair for a specified book ID.\\n     * @param bookId The book ID.\\n     * @return The book pair.\\n     */\\n    function bookPair(BookId bookId) external view returns (BookId);\\n\\n    /**\\n     * @notice Retrieves the pool for a specified key.\\n     * @param key The key of the pool.\\n     * @return The pool.\\n     */\\n    function getPool(bytes32 key) external view returns (Pool memory);\\n\\n    /**\\n     * @notice Retrieves the book pairs for a specified key.\\n     * @param key The key of the pool.\\n     * @return bookIdA The book ID for the first book.\\n     * @return bookIdB The book ID for the second book.\\n     */\\n    function getBookPairs(bytes32 key) external view returns (BookId bookIdA, BookId bookIdB);\\n\\n    /**\\n     * @notice Retrieves the liquidity for a specified key.\\n     * @param key The key of the pool.\\n     * @return liquidityA The liquidity for the first token.\\n     * @return liquidityB The liquidity for the second token.\\n     */\\n    function getLiquidity(bytes32 key)\\n        external\\n        view\\n        returns (Liquidity memory liquidityA, Liquidity memory liquidityB);\\n\\n    /**\\n     * @notice Opens a new pool with the specified parameters.\\n     * @param bookKeyA The book key for the first book.\\n     * @param bookKeyB The book key for the second book.\\n     * @param salt The salt value.\\n     * @param strategy The address of the strategy.\\n     * @return key The key of the opened pool.\\n     */\\n    function open(\\n        IBookManager.BookKey calldata bookKeyA,\\n        IBookManager.BookKey calldata bookKeyB,\\n        bytes32 salt,\\n        address strategy\\n    ) external returns (bytes32 key);\\n\\n    /**\\n     * @notice Mints liquidity for the specified key.\\n     * @param key The key of the pool.\\n     * @param amountA The amount of the first token.\\n     * @param amountB The amount of the second token.\\n     * @param minLpAmount The minimum amount of liquidity tokens to mint.\\n     * @return The amount of liquidity tokens minted.\\n     */\\n    function mint(bytes32 key, uint256 amountA, uint256 amountB, uint256 minLpAmount)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Burns liquidity for the specified key.\\n     * @param key The key of the pool.\\n     * @param amount The amount of liquidity tokens to burn.\\n     * @param minAmountA The amount of the first token to receive.\\n     * @param minAmountB The minimum amount of the second token to receive.\\n     * @return The amounts of the first and second tokens to receive.\\n     */\\n    function burn(bytes32 key, uint256 amount, uint256 minAmountA, uint256 minAmountB)\\n        external\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Rebalances the pool for the specified key.\\n     * @param key The key of the pool.\\n     */\\n    function rebalance(bytes32 key) external;\\n}\\n\",\"keccak256\":\"0x2399b50329038b126a412eed9a2055e6b5a143fec8ae7d44bc69bf3ce465c18a\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/ISimpleOracleStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Tick} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\nimport {IBookManager} from \\\"clober-dex/v2-core/interfaces/IBookManager.sol\\\";\\n\\nimport {IStrategy} from \\\"./IStrategy.sol\\\";\\nimport {IOracle} from \\\"./IOracle.sol\\\";\\nimport \\\"./IRebalancer.sol\\\";\\n\\ninterface ISimpleOracleStrategy is IStrategy {\\n    error InvalidPrice();\\n    error InvalidAccess();\\n    error InvalidOraclePrice();\\n    error InvalidConfig();\\n    error InvalidValue();\\n    error ExceedsThreshold();\\n    error NotOperator();\\n    error Paused();\\n\\n    event SetOperator(address indexed operator, bool status);\\n    event UpdateConfig(bytes32 indexed key, Config config);\\n    event UpdatePosition(bytes32 indexed key, uint256 oraclePrice, Tick tickA, Tick tickB, uint256 rate);\\n    event Pause(bytes32 indexed key);\\n    event Unpause(bytes32 indexed key);\\n\\n    struct Config {\\n        uint24 referenceThreshold;\\n        uint24 rebalanceThreshold;\\n        uint24 rateA;\\n        uint24 rateB;\\n        uint24 minRateA;\\n        uint24 minRateB;\\n        uint24 priceThresholdA;\\n        uint24 priceThresholdB;\\n    }\\n\\n    struct Position {\\n        bool paused;\\n        uint128 oraclePrice;\\n        uint24 rate;\\n        Tick tickA;\\n        Tick tickB;\\n    }\\n\\n    function referenceOracle() external view returns (IOracle);\\n\\n    function bookManager() external view returns (IBookManager);\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function getConfig(bytes32 key) external view returns (Config memory);\\n\\n    function getPosition(bytes32 key) external view returns (Position memory);\\n\\n    function getLastRawAmount(bytes32 key) external view returns (uint256, uint256);\\n\\n    function isOraclePriceValid(bytes32 key) external view returns (bool);\\n\\n    function isPaused(bytes32 key) external view returns (bool);\\n\\n    function pause(bytes32 key) external;\\n\\n    function unpause(bytes32 key) external;\\n\\n    function updatePosition(bytes32 key, uint256 oraclePrice, Tick tickA, Tick tickB, uint24 rate) external;\\n\\n    function setConfig(bytes32 key, Config memory config) external;\\n\\n    function setOperator(address operator, bool status) external;\\n}\\n\",\"keccak256\":\"0x93ea16c839ba84a13074bc62468e3a49f707244e877c2167b49fb4fbaaef483c\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {BookId} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {Tick} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\n\\ninterface IStrategy {\\n    struct Order {\\n        Tick tick;\\n        uint64 rawAmount;\\n    }\\n\\n    /**\\n     * @notice Retrieves the orders for a specified key.\\n     * @param key The key of the pool.\\n     * @return ordersA The orders for the first token.\\n     * @return ordersB The orders for the second token.\\n     * @dev Clears pool orders if an error occurs and retains current orders if the list is empty.\\n     */\\n    function computeOrders(bytes32 key) external view returns (Order[] memory ordersA, Order[] memory ordersB);\\n\\n    /**\\n     * @notice Hook that is called after minting.\\n     * @param sender The address of the sender.\\n     * @param key The key of the pool.\\n     * @param mintAmount The amount minted.\\n     * @param lastTotalSupply The total supply before minting.\\n     */\\n    function mintHook(address sender, bytes32 key, uint256 mintAmount, uint256 lastTotalSupply) external;\\n\\n    /**\\n     * @notice Hook that is called after burning.\\n     * @param sender The address of the sender.\\n     * @param key The key of the pool.\\n     * @param burnAmount The amount burned.\\n     * @param lastTotalSupply The total supply before burning.\\n     */\\n    function burnHook(address sender, bytes32 key, uint256 burnAmount, uint256 lastTotalSupply) external;\\n\\n    /**\\n     * @notice Hook that is called after rebalancing.\\n     * @param sender The address of the sender.\\n     * @param key The key of the pool.\\n     * @param liquidityA The liquidity orders for the first token.\\n     * @param liquidityB The liquidity orders for the second token.\\n     */\\n    function rebalanceHook(address sender, bytes32 key, Order[] memory liquidityA, Order[] memory liquidityB)\\n        external;\\n}\\n\",\"keccak256\":\"0x38cbebe4fc2d3cc65afe9a488aabcbb57458f2e1733ac40c8dc1c542b7f06523\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561000f575f80fd5b5060405161324538038061324583398101604081905261002e91610103565b806001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61006581610084565b50506001600160a01b0392831660805290821660a0521660c05261015f565b600180546001600160a01b031916905561009d816100a0565b50565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461009d575f80fd5b5f805f8060808587031215610116575f80fd5b8451610121816100ef565b6020860151909450610132816100ef565b6040860151909350610143816100ef565b6060860151909250610154816100ef565b939692955090935050565b60805160a05160c0516130536101f25f395f818161039f01528181610b9a01528181610c2c01528181611426015261194201525f81816101a301528181610b0f01528181610ccf0152818161138a015281816118a6015281816119ea01528181611a390152611b7201525f8181610357015281816114e001528181611dc901528181611e6601526120bf01526130535ff3fe608060405234801561000f575f80fd5b506004361061019a575f3560e01c8063715018a6116100e8578063b5a562bd11610093578063ed56531a1161006e578063ed56531a14610574578063edffdaaf14610587578063f2fde38b1461059a578063f6389237146105ad575f80fd5b8063b5a562bd14610542578063db7c74b614610550578063e30c397814610563575f80fd5b8063a0f15331116100c3578063a0f1533114610509578063a30416d31461051c578063a3a36f551461052f575f80fd5b8063715018a6146104e957806379ba5097146104f15780638da5cb5b146104f9575f80fd5b8063337cceb911610148578063558a729711610123578063558a7297146103c15780636d70f7ae146103d45780636dd5b69d146103f6575f80fd5b8063337cceb9146103525780633b93fabc146103795780633f322bc91461039a575f80fd5b8063241b71bb11610178578063241b71bb146102f55780632b3ba681146103275780632f4dae9f1461033f575f80fd5b806301d22ccd1461019e578063063570bd146101e25780631928b3cb146101f7575b5f80fd5b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f56101f03660046127c9565b6105f2565b005b61029e61020536600461288f565b6040805160a0810182525f80825260208201819052918101829052606081018290526080810191909152505f90815260046020908152604091829020825160a081018452905460ff8116151582526001600160801b036101008204169282019290925262ffffff600160881b83041692810192909252600160a01b8104600290810b6060840152600160b81b909104900b608082015290565b6040516101d991905f60a0820190508251151582526001600160801b03602084015116602083015262ffffff6040840151166040830152606083015160020b6060830152608083015160020b608083015292915050565b61031761030336600461288f565b5f9081526004602052604090205460ff1690565b60405190151581526020016101d9565b610331620f424081565b6040519081526020016101d9565b6101f561034d36600461288f565b6108ad565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b61038c61038736600461288f565b61091b565b6040516101d99291906128f8565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b6101f56103cf366004612939565b6110b9565b6103176103e2366004612974565b60026020525f908152604090205460ff1681565b6104dc61040436600461288f565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152505f90815260036020908152604091829020825161010081018452905462ffffff808216835263010000008204811693830193909352660100000000000081048316938201939093526901000000000000000000830482166060820152600160601b830482166080820152600160781b8304821660a0820152600160901b8304821660c0820152600160a81b9092041660e082015290565b6040516101d99190612996565b6101f5611118565b6101f561112b565b5f546001600160a01b03166101c5565b6101f5610517366004612a2a565b611174565b61031761052a36600461288f565b611792565b6101f561053d366004612a81565b6119df565b6103316001600160801b0381565b6101f561055e366004612a81565b611a2e565b6001546001600160a01b03166101c5565b6101f561058236600461288f565b611ae9565b6101f5610595366004612b8b565b611b67565b6101f56105a8366004612974565b611c75565b6105dd6105bb36600461288f565b5f90815260056020526040902054608081901c916001600160801b0390911690565b604080519283526020830191909152016101d9565b6105fa611cf2565b620f4240815f015162ffffff16118061061e5750620f4240816020015162ffffff16115b806106345750620f4240816040015162ffffff16115b8061064a5750620f4240816060015162ffffff16115b806106605750620f4240816080015162ffffff16115b806106765750620f42408160a0015162ffffff16115b8061068c5750620f42408160c0015162ffffff16115b806106a25750620f42408160e0015162ffffff16115b156106c0576040516306b7c75960e31b815260040160405180910390fd5b806080015162ffffff16816040015162ffffff1610806106f157508060a0015162ffffff16816060015162ffffff16105b1561070f576040516306b7c75960e31b815260040160405180910390fd5b5f828152600360209081526040918290208351815492850151858501516060870151608088015160a089015160c08a015160e08b015162ffffff97881665ffffffffffff19909a1699909917630100000096881696909602959095176bffffffffffff00000000000019166601000000000000948716949094026bffffff000000000000000000191693909317690100000000000000000092861692909202919091177fffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffff16600160601b918516919091027fffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff1617600160781b91841691909102177fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff16600160901b918316919091027fffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffff1617600160a81b91909316029190911790555182907fa6796aaa3e8df6d8ed1c3d26d8a54828d50465a6b4151685c28954b40e3be4c1906108a1908490612996565b60405180910390a25050565b335f9081526002602052604090205460ff166108dc57604051631f0853c160e21b815260040160405180910390fd5b5f81815260046020526040808220805460ff191690555182917fbd104d77fb864be973a9ad3964a3b186ad15178d292d6e9b0e6783e16162fd2291a250565b5f81815260046020908152604091829020825160a081018452905460ff811615801583526001600160801b036101008304169383019390935262ffffff600160881b82041693820193909352600160a01b8304600290810b606083810191909152600160b81b909404900b608082015282916109c3576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f848152600360209081526040808320815161010081018352905462ffffff80821683526301000000820481168386015266010000000000008204811683850152690100000000000000000082048116606080850191909152600160601b83048216608080860191909152600160781b8404831660a080870191909152600160901b8504841660c080880191909152600160a81b90950490931660e086015285518085018752888152808801899052808701899052808301899052808201899052808401899052865194850187528885528488018990528487018990528483018990529084018890529183018790528451908101855286815294850186905292840194909452929091610aed60405180606001604052805f81526020015f81526020015f81525090565b60405163c630ed7d60e01b8152600481018a90525f9081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c630ed7d906024016040805180830381865afa158015610b53573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b779190612c1c565b604051639b22917d60e01b81526001600160c01b038316600482015291935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610be7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0b9190612c4d565b604051639b22917d60e01b81526001600160c01b03831660048201529096507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610c79573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c9d9190612c4d565b6040517ffa6793d5000000000000000000000000000000000000000000000000000000008152600481018d90529095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fa6793d59060240160c060405180830381865afa158015610d1c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d409190612d50565b5f8d81526005602052604090205491955093508015801590610df55750620f4240886020015162ffffff16886020015167ffffffffffffffff16608084901c610d899190612d8e565b610d939190612d8e565b610d9d9190612da5565b85604001511180610df55750620f4240886020015162ffffff16876020015167ffffffffffffffff166001600160801b038416610dda9190612d8e565b610de49190612d8e565b610dee9190612da5565b8460400151115b15610e0857505050505050505050915091565b610e3089602001516001600160801b0316895f015162ffffff1689604001518a5f0151611d1e565b610e66576040517f1f8f95a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505f80610edc84602001518560400151865f0151610e869190612dc4565b610e909190612dc4565b602085015160408601518651610ea69190612dc4565b610eb09190612dc4565b8a602001516001600160801b0316610ecb8a60400151611f8e565b8a51610ed690611f8e565b8c61200c565b91509150610ef3866060015162ffffff1660171c90565b15610f10576060860151610f0d9062ffffff16835f6122ca565b91505b610f23856060015162ffffff1660171c90565b15610f40576060850151610f3d9062ffffff16825f6122ca565b90505b60408051600180825281830190925290816020015b604080518082019091525f8082526020820152815260200190600190039081610f55575050604080516001808252818301909252919b50602082015b604080518082019091525f8082526020820152815260200190600190039081610f915790505098506040518060400160405280896060015160020b8152602001611015620f4240896020015167ffffffffffffffff168c6040015162ffffff1687610ffc9190612d8e565b6110069190612da5565b6110109190612da5565b61230d565b67ffffffffffffffff168152508a5f8151811061103457611034612dd7565b60200260200101819052506040518060400160405280896080015160020b8152602001611082620f4240886020015167ffffffffffffffff168c6040015162ffffff1686610ffc9190612d8e565b67ffffffffffffffff16815250895f815181106110a1576110a1612dd7565b60200260200101819052505050505050505050915091565b6110c1611cf2565b6001600160a01b0382165f81815260026020908152604091829020805460ff191685151590811790915591519182527f1618a22a3b00b9ac70fd5a82f1f5cdd8cb272bd0f1b740ddf7c26ab05881dd5b91016108a1565b611120611cf2565b6111295f612347565b565b60015433906001600160a01b031681146111685760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b61117181612347565b50565b335f9081526002602052604090205460ff166111a357604051631f0853c160e21b815260040160405180910390fd5b5f6111b08460020b61236d565b90505f6111c76111bf85612deb565b60020b61236d565b9050808210611201576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620f42408362ffffff161115611243576040517faa7feadc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f87815260036020908152604091829020825161010081018452905462ffffff808216835263010000008204811693830193909352660100000000000081048316938201939093526901000000000000000000830482166060820152600160601b830482166080820152600160781b8304821660a0820152600160901b8304821660c08201819052600160a81b90930490911660e0820152908390620f4240906112ed9082612dc4565b6112f7908a612d8e565b6113019190612da5565b108061133b575081620f42408260e0015162ffffff16620f42406113259190612e0b565b61132f908a612d8e565b6113399190612da5565b115b15611372576040517f107826c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405163c630ed7d60e01b8152600481018990525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c630ed7d906024016040805180830381865afa1580156113d6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113fa9190612c1c565b50604051639b22917d60e01b81526001600160c01b03821660048201529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa15801561146b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061148f9190612c4d565b90505f61149f8260400151611f8e565b90505f6114ae835f0151611f8e565b90506114bb82600a612efe565b6114c682600a612efe565b6114d0908d612d8e565b6114da9190612da5565b9a5060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561153a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061155e9190612f0c565b61156990600a612efe565b611573908d612d8e565b5f8e815260046020908152604091829020825160a081018452905460ff8116151582526001600160801b036101008204169282019290925262ffffff600160881b83041692810192909252600160a01b8104600290810b6060840152600160b81b909104900b6080820152911c9b506115eb8c61262c565b81602001906001600160801b031690816001600160801b0316815250508a816060019060020b908160020b8152505089816080019060020b908160020b8152505088816040019062ffffff16908162ffffff16815250508060045f8f81526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a8154816001600160801b0302191690836001600160801b031602179055506040820151815f0160116101000a81548162ffffff021916908362ffffff1602179055506060820151815f0160146101000a81548162ffffff021916908360020b62ffffff1602179055506080820151815f0160176101000a81548162ffffff021916908360020b62ffffff16021790555090505060055f8e81526020019081526020015f205f90558c7f6bfe82e0fc1c0e49aa5a610028c276fddb4bc3c4f8ae34f09277ce63597818f98d8d8d8d60405161177b9493929190938452600292830b6020850152910b604083015262ffffff16606082015260800190565b60405180910390a250505050505050505050505050565b5f81815260036020908152604080832081516101008082018452915462ffffff80821683526301000000820481168387015266010000000000008204811683860152690100000000000000000082048116606080850191909152600160601b83048216608080860191909152600160781b8404831660a080870191909152600160901b8504841660c0870152600160a81b909404831660e08601528989526004808952878a20885195860189525460ff8116151586529687046001600160801b031698850198909852600160881b860490921683870152600160a01b8504600290810b91840191909152600160b81b90940490930b92810192909252915163c630ed7d60e01b8152928301859052909183907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c630ed7d906024016040805180830381865afa1580156118f2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119169190612c1c565b50604051639b22917d60e01b81526001600160c01b03821660048201529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa158015611987573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119ab9190612c4d565b90506119d583602001516001600160801b0316855f015162ffffff168360400151845f0151611d1e565b9695505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a2857604051633006171960e21b815260040160405180910390fd5b50505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a7757604051633006171960e21b815260040160405180910390fd5b5f8381526005602052604090205481611a99846001600160801b038416612d8e565b611aa39190612da5565b608083611ab28685841c612d8e565b611abc9190612da5565b611ac7911b83612e0b565b611ad19190612e0b565b5f948552600560205260409094209390935550505050565b335f9081526002602052604090205460ff16611b1857604051631f0853c160e21b815260040160405180910390fd5b5f8181526005602090815260408083208390556004909152808220805460ff191660011790555182917f6e78d720a83dbf19884c4e27501ba84a8a2e5ca1503419b03ee68d28d548e85791a250565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611bb057604051633006171960e21b815260040160405180910390fd5b5f805f5b8451811015611bff575f858281518110611bd057611bd0612dd7565b60200260200101519050806020015167ffffffffffffffff1684611bf49190612dc4565b935050600101611bb4565b505f5b8351811015611c4d575f848281518110611c1e57611c1e612dd7565b60200260200101519050806020015167ffffffffffffffff1683611c429190612dc4565b925050600101611c02565b50611c5c81608084901b612dc4565b5f95865260056020526040909520949094555050505050565b611c7d611cf2565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff199091168117909155611cba5f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f546001600160a01b031633146111295760405163118cdaa760e01b815233600482015260240161115f565b6040805160028082526060820183525f9283928392909160208301908036833701905050905084815f81518110611d5757611d57612dd7565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110611d8b57611d8b612dd7565b6001600160a01b0392831660209182029290920101526040517f9d23d9f20000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000090911690639d23d9f290611e00908490600401612f2c565b5f60405180830381865afa925050508015611e3c57506040513d5f823e601f3d908101601f19168201604052611e399190810190612f78565b60015b611e4a575f92505050611f86565b805f81518110611e5c57611e5c612dd7565b60200260200101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ec0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ee49190612f0c565b611eef90600a612efe565b82600181518110611f0257611f02612dd7565b6020026020010151611f149190612d8e565b611f1e9190612da5565b92505086620f4240611f308882612dc4565b611f3a9085612d8e565b611f449190612da5565b1080611f70575086620f4240611f5a8882612e0b565b611f649085612d8e565b611f6e9190612da5565b115b15611f7f575f92505050611f86565b6001925050505b949350505050565b5f6001600160a01b0382161561200357816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fda573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ffe9190612f0c565b612006565b60125b92915050565b5f808360ff168560ff161115612042576120268486613004565b61203190600a612efe565b61203b9088612d8e565b9650612072565b8360ff168560ff1610156120725761205a8585613004565b61206590600a612efe565b61206f9089612d8e565b97505b620f4240836040015162ffffff168961208b9190612d8e565b6120959190612da5565b9150620f4240836060015162ffffff16886120b09190612d8e565b6120ba9190612da5565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612119573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061213d9190612f0c565b61214890600a612efe565b90505f6121558285612d8e565b90505f6121628985612d8e565b905080821115612189576121768382612da5565b94506121828386612d8e565b91506121a2565b6121938983612da5565b935061219f8985612d8e565b90505b82620f4240876080015162ffffff168d6121bc9190612d8e565b6121c69190612da5565b6121d09190612d8e565b8210156121fd57620f4240866080015162ffffff168c6121f09190612d8e565b6121fa9190612da5565b94505b88620f42408760a0015162ffffff168c6122179190612d8e565b6122219190612da5565b61222b9190612d8e565b81101561225857620f42408660a0015162ffffff168b61224b9190612d8e565b6122559190612da5565b93505b8660ff168860ff16111561228c576122708789613004565b61227b90600a612efe565b6122859085612da5565b93506122bc565b8660ff168860ff1610156122bc576122a48888613004565b6122af90600a612efe565b6122b99086612da5565b94505b505050965096945050505050565b5f6207a11f19627fffff8516018183156122e457815f0391505b81620f42400190506119d5620f4240866122fe9190612d8e565b82810615158616908390040190565b5f67ffffffffffffffff82111561234357604080516306dfcc6560e41b815260048101919091526024810183905260440161115f565b5090565b6001805473ffffffffffffffffffffffffffffffffffffffff191690556111718161265f565b5f612377826126bb565b815f600282900b811361238a5781612393565b61239382612deb565b62ffffff81169150600116156123b7576bfff97272373d413259a4699092506123bf565b600160601b92505b60028116156123de5760606bfff2e50f5f656932ef12357c8402901c92505b60048116156123fd5760606bffe5caca7e10e4e61c3624ea8402901c92505b600881161561241c5760606bffcb9843d60f6159c9db58838402901c92505b601081161561243b5760606bff973b41fa98c081472e68968402901c92505b602081161561245a5760606bff2ea16466c96a3843ec78b38402901c92505b60408116156124795760606bfe5dee046a99a2a811c461f18402901c92505b60808116156124985760606bfcbe86c7900a88aedcffc83b8402901c92505b6101008116156124b85760606bf987a7253ac413176f2b074c8402901c92505b6102008116156124d85760606bf3392b0822b70005940c7a398402901c92505b6104008116156124f85760606be7159475a2c29b7443b29c7f8402901c92505b6108008116156125185760606bd097f3bdfd2022b8845ad8f78402901c92505b6110008116156125385760606ba9f746462d870fdf8a65dc1f8402901c92505b6120008116156125585760606b70d869a156d2a1b890bb3df68402901c92505b6140008116156125785760606b31be135f97d08fd9812315058402901c92505b6180008116156125985760606b09aa508b5b7a84e1c677de548402901c92505b620100008116156125b85760606a5d6af8dedb81196699c3298402901c92505b620200008116156125d7576060692216e584f5fa1ea926048402901c92505b620400008116156125f457606067048a170391f7dc428402901c92505b5f8260020b131561262557612622837801000000000000000000000000000000000000000000000000612da5565b92505b5050919050565b5f6001600160801b03821115612343576040516306dfcc6560e41b8152608060048201526024810183905260440161115f565b5f80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6207ffff600282900b13806126e057506126d76207ffff612deb565b60020b8160020b125b15611171576040517fce8ef7fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b634e487b7160e01b5f52604160045260245ffd5b604051610100810167ffffffffffffffff8111828210171561274f5761274f612717565b60405290565b6040805190810167ffffffffffffffff8111828210171561274f5761274f612717565b604051601f8201601f1916810167ffffffffffffffff811182821017156127a1576127a1612717565b604052919050565b62ffffff81168114611171575f80fd5b80356127c4816127a9565b919050565b5f808284036101208112156127dc575f80fd5b8335925061010080601f19830112156127f3575f80fd5b6127fb61272b565b9150602085013561280b816127a9565b8252612819604086016127b9565b602083015261282a606086016127b9565b604083015261283b608086016127b9565b606083015261284c60a086016127b9565b608083015261285d60c086016127b9565b60a083015261286e60e086016127b9565b60c083015261287e8186016127b9565b60e083015250809150509250929050565b5f6020828403121561289f575f80fd5b5035919050565b5f815180845260208085019450602084015f5b838110156128ed578151805160020b885283015167ffffffffffffffff1683880152604090960195908201906001016128b9565b509495945050505050565b604081525f61290a60408301856128a6565b828103602084015261291c81856128a6565b95945050505050565b6001600160a01b0381168114611171575f80fd5b5f806040838503121561294a575f80fd5b823561295581612925565b915060208301358015158114612969575f80fd5b809150509250929050565b5f60208284031215612984575f80fd5b813561298f81612925565b9392505050565b5f6101008201905062ffffff8084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525060c08301516129fb60c084018262ffffff169052565b5060e0830151612a1260e084018262ffffff169052565b5092915050565b8035600281900b81146127c4575f80fd5b5f805f805f60a08688031215612a3e575f80fd5b8535945060208601359350612a5560408701612a19565b9250612a6360608701612a19565b91506080860135612a73816127a9565b809150509295509295909350565b5f805f8060808587031215612a94575f80fd5b8435612a9f81612925565b966020860135965060408601359560600135945092505050565b5f67ffffffffffffffff821115612ad257612ad2612717565b5060051b60200190565b67ffffffffffffffff81168114611171575f80fd5b5f82601f830112612b00575f80fd5b81356020612b15612b1083612ab9565b612778565b82815260069290921b84018101918181019086841115612b33575f80fd5b8286015b84811015612b805760408189031215612b4e575f80fd5b612b56612755565b612b5f82612a19565b815284820135612b6e81612adc565b81860152835291830191604001612b37565b509695505050505050565b5f805f8060808587031215612b9e575f80fd5b8435612ba981612925565b935060208501359250604085013567ffffffffffffffff80821115612bcc575f80fd5b612bd888838901612af1565b93506060870135915080821115612bed575f80fd5b50612bfa87828801612af1565b91505092959194509250565b80516001600160c01b03811681146127c4575f80fd5b5f8060408385031215612c2d575f80fd5b612c3683612c06565b9150612c4460208401612c06565b90509250929050565b5f60c08284031215612c5d575f80fd5b60405160c0810181811067ffffffffffffffff82111715612c8057612c80612717565b6040528251612c8e81612925565b81526020830151612c9e81612adc565b60208201526040830151612cb181612925565b60408201526060830151612cc4816127a9565b60608201526080830151612cd781612925565b608082015260a0830151612cea816127a9565b60a08201529392505050565b5f60608284031215612d06575f80fd5b6040516060810181811067ffffffffffffffff82111715612d2957612d29612717565b80604052508091508251815260208301516020820152604083015160408201525092915050565b5f8060c08385031215612d61575f80fd5b612d6b8484612cf6565b9150612c448460608501612cf6565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761200657612006612d7a565b5f82612dbf57634e487b7160e01b5f52601260045260245ffd5b500490565b8082018082111561200657612006612d7a565b634e487b7160e01b5f52603260045260245ffd5b5f8160020b627fffff198103612e0357612e03612d7a565b5f0392915050565b8181038181111561200657612006612d7a565b600181815b80851115612e5857815f1904821115612e3e57612e3e612d7a565b80851615612e4b57918102915b93841c9390800290612e23565b509250929050565b5f82612e6e57506001612006565b81612e7a57505f612006565b8160018114612e905760028114612e9a57612eb6565b6001915050612006565b60ff841115612eab57612eab612d7a565b50506001821b612006565b5060208310610133831016604e8410600b8410161715612ed9575081810a612006565b612ee38383612e1e565b805f1904821115612ef657612ef6612d7a565b029392505050565b5f61298f60ff841683612e60565b5f60208284031215612f1c575f80fd5b815160ff8116811461298f575f80fd5b602080825282518282018190525f9190848201906040850190845b81811015612f6c5783516001600160a01b031683529284019291840191600101612f47565b50909695505050505050565b5f6020808385031215612f89575f80fd5b825167ffffffffffffffff811115612f9f575f80fd5b8301601f81018513612faf575f80fd5b8051612fbd612b1082612ab9565b81815260059190911b82018301908381019087831115612fdb575f80fd5b928401925b82841015612ff957835182529284019290840190612fe0565b979650505050505050565b60ff828116828216039081111561200657612006612d7a56fea26469706673582212201cd27d4b8fa50b7e29c291e1acb7ea478e25e792fb49f52c9989b159deb10dbe64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b506004361061019a575f3560e01c8063715018a6116100e8578063b5a562bd11610093578063ed56531a1161006e578063ed56531a14610574578063edffdaaf14610587578063f2fde38b1461059a578063f6389237146105ad575f80fd5b8063b5a562bd14610542578063db7c74b614610550578063e30c397814610563575f80fd5b8063a0f15331116100c3578063a0f1533114610509578063a30416d31461051c578063a3a36f551461052f575f80fd5b8063715018a6146104e957806379ba5097146104f15780638da5cb5b146104f9575f80fd5b8063337cceb911610148578063558a729711610123578063558a7297146103c15780636d70f7ae146103d45780636dd5b69d146103f6575f80fd5b8063337cceb9146103525780633b93fabc146103795780633f322bc91461039a575f80fd5b8063241b71bb11610178578063241b71bb146102f55780632b3ba681146103275780632f4dae9f1461033f575f80fd5b806301d22ccd1461019e578063063570bd146101e25780631928b3cb146101f7575b5f80fd5b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f56101f03660046127c9565b6105f2565b005b61029e61020536600461288f565b6040805160a0810182525f80825260208201819052918101829052606081018290526080810191909152505f90815260046020908152604091829020825160a081018452905460ff8116151582526001600160801b036101008204169282019290925262ffffff600160881b83041692810192909252600160a01b8104600290810b6060840152600160b81b909104900b608082015290565b6040516101d991905f60a0820190508251151582526001600160801b03602084015116602083015262ffffff6040840151166040830152606083015160020b6060830152608083015160020b608083015292915050565b61031761030336600461288f565b5f9081526004602052604090205460ff1690565b60405190151581526020016101d9565b610331620f424081565b6040519081526020016101d9565b6101f561034d36600461288f565b6108ad565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b61038c61038736600461288f565b61091b565b6040516101d99291906128f8565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b6101f56103cf366004612939565b6110b9565b6103176103e2366004612974565b60026020525f908152604090205460ff1681565b6104dc61040436600461288f565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152505f90815260036020908152604091829020825161010081018452905462ffffff808216835263010000008204811693830193909352660100000000000081048316938201939093526901000000000000000000830482166060820152600160601b830482166080820152600160781b8304821660a0820152600160901b8304821660c0820152600160a81b9092041660e082015290565b6040516101d99190612996565b6101f5611118565b6101f561112b565b5f546001600160a01b03166101c5565b6101f5610517366004612a2a565b611174565b61031761052a36600461288f565b611792565b6101f561053d366004612a81565b6119df565b6103316001600160801b0381565b6101f561055e366004612a81565b611a2e565b6001546001600160a01b03166101c5565b6101f561058236600461288f565b611ae9565b6101f5610595366004612b8b565b611b67565b6101f56105a8366004612974565b611c75565b6105dd6105bb36600461288f565b5f90815260056020526040902054608081901c916001600160801b0390911690565b604080519283526020830191909152016101d9565b6105fa611cf2565b620f4240815f015162ffffff16118061061e5750620f4240816020015162ffffff16115b806106345750620f4240816040015162ffffff16115b8061064a5750620f4240816060015162ffffff16115b806106605750620f4240816080015162ffffff16115b806106765750620f42408160a0015162ffffff16115b8061068c5750620f42408160c0015162ffffff16115b806106a25750620f42408160e0015162ffffff16115b156106c0576040516306b7c75960e31b815260040160405180910390fd5b806080015162ffffff16816040015162ffffff1610806106f157508060a0015162ffffff16816060015162ffffff16105b1561070f576040516306b7c75960e31b815260040160405180910390fd5b5f828152600360209081526040918290208351815492850151858501516060870151608088015160a089015160c08a015160e08b015162ffffff97881665ffffffffffff19909a1699909917630100000096881696909602959095176bffffffffffff00000000000019166601000000000000948716949094026bffffff000000000000000000191693909317690100000000000000000092861692909202919091177fffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffff16600160601b918516919091027fffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff1617600160781b91841691909102177fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff16600160901b918316919091027fffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffff1617600160a81b91909316029190911790555182907fa6796aaa3e8df6d8ed1c3d26d8a54828d50465a6b4151685c28954b40e3be4c1906108a1908490612996565b60405180910390a25050565b335f9081526002602052604090205460ff166108dc57604051631f0853c160e21b815260040160405180910390fd5b5f81815260046020526040808220805460ff191690555182917fbd104d77fb864be973a9ad3964a3b186ad15178d292d6e9b0e6783e16162fd2291a250565b5f81815260046020908152604091829020825160a081018452905460ff811615801583526001600160801b036101008304169383019390935262ffffff600160881b82041693820193909352600160a01b8304600290810b606083810191909152600160b81b909404900b608082015282916109c3576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f848152600360209081526040808320815161010081018352905462ffffff80821683526301000000820481168386015266010000000000008204811683850152690100000000000000000082048116606080850191909152600160601b83048216608080860191909152600160781b8404831660a080870191909152600160901b8504841660c080880191909152600160a81b90950490931660e086015285518085018752888152808801899052808701899052808301899052808201899052808401899052865194850187528885528488018990528487018990528483018990529084018890529183018790528451908101855286815294850186905292840194909452929091610aed60405180606001604052805f81526020015f81526020015f81525090565b60405163c630ed7d60e01b8152600481018a90525f9081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c630ed7d906024016040805180830381865afa158015610b53573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b779190612c1c565b604051639b22917d60e01b81526001600160c01b038316600482015291935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610be7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0b9190612c4d565b604051639b22917d60e01b81526001600160c01b03831660048201529096507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610c79573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c9d9190612c4d565b6040517ffa6793d5000000000000000000000000000000000000000000000000000000008152600481018d90529095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fa6793d59060240160c060405180830381865afa158015610d1c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d409190612d50565b5f8d81526005602052604090205491955093508015801590610df55750620f4240886020015162ffffff16886020015167ffffffffffffffff16608084901c610d899190612d8e565b610d939190612d8e565b610d9d9190612da5565b85604001511180610df55750620f4240886020015162ffffff16876020015167ffffffffffffffff166001600160801b038416610dda9190612d8e565b610de49190612d8e565b610dee9190612da5565b8460400151115b15610e0857505050505050505050915091565b610e3089602001516001600160801b0316895f015162ffffff1689604001518a5f0151611d1e565b610e66576040517f1f8f95a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505f80610edc84602001518560400151865f0151610e869190612dc4565b610e909190612dc4565b602085015160408601518651610ea69190612dc4565b610eb09190612dc4565b8a602001516001600160801b0316610ecb8a60400151611f8e565b8a51610ed690611f8e565b8c61200c565b91509150610ef3866060015162ffffff1660171c90565b15610f10576060860151610f0d9062ffffff16835f6122ca565b91505b610f23856060015162ffffff1660171c90565b15610f40576060850151610f3d9062ffffff16825f6122ca565b90505b60408051600180825281830190925290816020015b604080518082019091525f8082526020820152815260200190600190039081610f55575050604080516001808252818301909252919b50602082015b604080518082019091525f8082526020820152815260200190600190039081610f915790505098506040518060400160405280896060015160020b8152602001611015620f4240896020015167ffffffffffffffff168c6040015162ffffff1687610ffc9190612d8e565b6110069190612da5565b6110109190612da5565b61230d565b67ffffffffffffffff168152508a5f8151811061103457611034612dd7565b60200260200101819052506040518060400160405280896080015160020b8152602001611082620f4240886020015167ffffffffffffffff168c6040015162ffffff1686610ffc9190612d8e565b67ffffffffffffffff16815250895f815181106110a1576110a1612dd7565b60200260200101819052505050505050505050915091565b6110c1611cf2565b6001600160a01b0382165f81815260026020908152604091829020805460ff191685151590811790915591519182527f1618a22a3b00b9ac70fd5a82f1f5cdd8cb272bd0f1b740ddf7c26ab05881dd5b91016108a1565b611120611cf2565b6111295f612347565b565b60015433906001600160a01b031681146111685760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b61117181612347565b50565b335f9081526002602052604090205460ff166111a357604051631f0853c160e21b815260040160405180910390fd5b5f6111b08460020b61236d565b90505f6111c76111bf85612deb565b60020b61236d565b9050808210611201576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620f42408362ffffff161115611243576040517faa7feadc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f87815260036020908152604091829020825161010081018452905462ffffff808216835263010000008204811693830193909352660100000000000081048316938201939093526901000000000000000000830482166060820152600160601b830482166080820152600160781b8304821660a0820152600160901b8304821660c08201819052600160a81b90930490911660e0820152908390620f4240906112ed9082612dc4565b6112f7908a612d8e565b6113019190612da5565b108061133b575081620f42408260e0015162ffffff16620f42406113259190612e0b565b61132f908a612d8e565b6113399190612da5565b115b15611372576040517f107826c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405163c630ed7d60e01b8152600481018990525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c630ed7d906024016040805180830381865afa1580156113d6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113fa9190612c1c565b50604051639b22917d60e01b81526001600160c01b03821660048201529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa15801561146b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061148f9190612c4d565b90505f61149f8260400151611f8e565b90505f6114ae835f0151611f8e565b90506114bb82600a612efe565b6114c682600a612efe565b6114d0908d612d8e565b6114da9190612da5565b9a5060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561153a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061155e9190612f0c565b61156990600a612efe565b611573908d612d8e565b5f8e815260046020908152604091829020825160a081018452905460ff8116151582526001600160801b036101008204169282019290925262ffffff600160881b83041692810192909252600160a01b8104600290810b6060840152600160b81b909104900b6080820152911c9b506115eb8c61262c565b81602001906001600160801b031690816001600160801b0316815250508a816060019060020b908160020b8152505089816080019060020b908160020b8152505088816040019062ffffff16908162ffffff16815250508060045f8f81526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a8154816001600160801b0302191690836001600160801b031602179055506040820151815f0160116101000a81548162ffffff021916908362ffffff1602179055506060820151815f0160146101000a81548162ffffff021916908360020b62ffffff1602179055506080820151815f0160176101000a81548162ffffff021916908360020b62ffffff16021790555090505060055f8e81526020019081526020015f205f90558c7f6bfe82e0fc1c0e49aa5a610028c276fddb4bc3c4f8ae34f09277ce63597818f98d8d8d8d60405161177b9493929190938452600292830b6020850152910b604083015262ffffff16606082015260800190565b60405180910390a250505050505050505050505050565b5f81815260036020908152604080832081516101008082018452915462ffffff80821683526301000000820481168387015266010000000000008204811683860152690100000000000000000082048116606080850191909152600160601b83048216608080860191909152600160781b8404831660a080870191909152600160901b8504841660c0870152600160a81b909404831660e08601528989526004808952878a20885195860189525460ff8116151586529687046001600160801b031698850198909852600160881b860490921683870152600160a01b8504600290810b91840191909152600160b81b90940490930b92810192909252915163c630ed7d60e01b8152928301859052909183907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c630ed7d906024016040805180830381865afa1580156118f2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119169190612c1c565b50604051639b22917d60e01b81526001600160c01b03821660048201529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa158015611987573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119ab9190612c4d565b90506119d583602001516001600160801b0316855f015162ffffff168360400151845f0151611d1e565b9695505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a2857604051633006171960e21b815260040160405180910390fd5b50505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a7757604051633006171960e21b815260040160405180910390fd5b5f8381526005602052604090205481611a99846001600160801b038416612d8e565b611aa39190612da5565b608083611ab28685841c612d8e565b611abc9190612da5565b611ac7911b83612e0b565b611ad19190612e0b565b5f948552600560205260409094209390935550505050565b335f9081526002602052604090205460ff16611b1857604051631f0853c160e21b815260040160405180910390fd5b5f8181526005602090815260408083208390556004909152808220805460ff191660011790555182917f6e78d720a83dbf19884c4e27501ba84a8a2e5ca1503419b03ee68d28d548e85791a250565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611bb057604051633006171960e21b815260040160405180910390fd5b5f805f5b8451811015611bff575f858281518110611bd057611bd0612dd7565b60200260200101519050806020015167ffffffffffffffff1684611bf49190612dc4565b935050600101611bb4565b505f5b8351811015611c4d575f848281518110611c1e57611c1e612dd7565b60200260200101519050806020015167ffffffffffffffff1683611c429190612dc4565b925050600101611c02565b50611c5c81608084901b612dc4565b5f95865260056020526040909520949094555050505050565b611c7d611cf2565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff199091168117909155611cba5f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f546001600160a01b031633146111295760405163118cdaa760e01b815233600482015260240161115f565b6040805160028082526060820183525f9283928392909160208301908036833701905050905084815f81518110611d5757611d57612dd7565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110611d8b57611d8b612dd7565b6001600160a01b0392831660209182029290920101526040517f9d23d9f20000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000090911690639d23d9f290611e00908490600401612f2c565b5f60405180830381865afa925050508015611e3c57506040513d5f823e601f3d908101601f19168201604052611e399190810190612f78565b60015b611e4a575f92505050611f86565b805f81518110611e5c57611e5c612dd7565b60200260200101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ec0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ee49190612f0c565b611eef90600a612efe565b82600181518110611f0257611f02612dd7565b6020026020010151611f149190612d8e565b611f1e9190612da5565b92505086620f4240611f308882612dc4565b611f3a9085612d8e565b611f449190612da5565b1080611f70575086620f4240611f5a8882612e0b565b611f649085612d8e565b611f6e9190612da5565b115b15611f7f575f92505050611f86565b6001925050505b949350505050565b5f6001600160a01b0382161561200357816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fda573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ffe9190612f0c565b612006565b60125b92915050565b5f808360ff168560ff161115612042576120268486613004565b61203190600a612efe565b61203b9088612d8e565b9650612072565b8360ff168560ff1610156120725761205a8585613004565b61206590600a612efe565b61206f9089612d8e565b97505b620f4240836040015162ffffff168961208b9190612d8e565b6120959190612da5565b9150620f4240836060015162ffffff16886120b09190612d8e565b6120ba9190612da5565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612119573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061213d9190612f0c565b61214890600a612efe565b90505f6121558285612d8e565b90505f6121628985612d8e565b905080821115612189576121768382612da5565b94506121828386612d8e565b91506121a2565b6121938983612da5565b935061219f8985612d8e565b90505b82620f4240876080015162ffffff168d6121bc9190612d8e565b6121c69190612da5565b6121d09190612d8e565b8210156121fd57620f4240866080015162ffffff168c6121f09190612d8e565b6121fa9190612da5565b94505b88620f42408760a0015162ffffff168c6122179190612d8e565b6122219190612da5565b61222b9190612d8e565b81101561225857620f42408660a0015162ffffff168b61224b9190612d8e565b6122559190612da5565b93505b8660ff168860ff16111561228c576122708789613004565b61227b90600a612efe565b6122859085612da5565b93506122bc565b8660ff168860ff1610156122bc576122a48888613004565b6122af90600a612efe565b6122b99086612da5565b94505b505050965096945050505050565b5f6207a11f19627fffff8516018183156122e457815f0391505b81620f42400190506119d5620f4240866122fe9190612d8e565b82810615158616908390040190565b5f67ffffffffffffffff82111561234357604080516306dfcc6560e41b815260048101919091526024810183905260440161115f565b5090565b6001805473ffffffffffffffffffffffffffffffffffffffff191690556111718161265f565b5f612377826126bb565b815f600282900b811361238a5781612393565b61239382612deb565b62ffffff81169150600116156123b7576bfff97272373d413259a4699092506123bf565b600160601b92505b60028116156123de5760606bfff2e50f5f656932ef12357c8402901c92505b60048116156123fd5760606bffe5caca7e10e4e61c3624ea8402901c92505b600881161561241c5760606bffcb9843d60f6159c9db58838402901c92505b601081161561243b5760606bff973b41fa98c081472e68968402901c92505b602081161561245a5760606bff2ea16466c96a3843ec78b38402901c92505b60408116156124795760606bfe5dee046a99a2a811c461f18402901c92505b60808116156124985760606bfcbe86c7900a88aedcffc83b8402901c92505b6101008116156124b85760606bf987a7253ac413176f2b074c8402901c92505b6102008116156124d85760606bf3392b0822b70005940c7a398402901c92505b6104008116156124f85760606be7159475a2c29b7443b29c7f8402901c92505b6108008116156125185760606bd097f3bdfd2022b8845ad8f78402901c92505b6110008116156125385760606ba9f746462d870fdf8a65dc1f8402901c92505b6120008116156125585760606b70d869a156d2a1b890bb3df68402901c92505b6140008116156125785760606b31be135f97d08fd9812315058402901c92505b6180008116156125985760606b09aa508b5b7a84e1c677de548402901c92505b620100008116156125b85760606a5d6af8dedb81196699c3298402901c92505b620200008116156125d7576060692216e584f5fa1ea926048402901c92505b620400008116156125f457606067048a170391f7dc428402901c92505b5f8260020b131561262557612622837801000000000000000000000000000000000000000000000000612da5565b92505b5050919050565b5f6001600160801b03821115612343576040516306dfcc6560e41b8152608060048201526024810183905260440161115f565b5f80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6207ffff600282900b13806126e057506126d76207ffff612deb565b60020b8160020b125b15611171576040517fce8ef7fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b634e487b7160e01b5f52604160045260245ffd5b604051610100810167ffffffffffffffff8111828210171561274f5761274f612717565b60405290565b6040805190810167ffffffffffffffff8111828210171561274f5761274f612717565b604051601f8201601f1916810167ffffffffffffffff811182821017156127a1576127a1612717565b604052919050565b62ffffff81168114611171575f80fd5b80356127c4816127a9565b919050565b5f808284036101208112156127dc575f80fd5b8335925061010080601f19830112156127f3575f80fd5b6127fb61272b565b9150602085013561280b816127a9565b8252612819604086016127b9565b602083015261282a606086016127b9565b604083015261283b608086016127b9565b606083015261284c60a086016127b9565b608083015261285d60c086016127b9565b60a083015261286e60e086016127b9565b60c083015261287e8186016127b9565b60e083015250809150509250929050565b5f6020828403121561289f575f80fd5b5035919050565b5f815180845260208085019450602084015f5b838110156128ed578151805160020b885283015167ffffffffffffffff1683880152604090960195908201906001016128b9565b509495945050505050565b604081525f61290a60408301856128a6565b828103602084015261291c81856128a6565b95945050505050565b6001600160a01b0381168114611171575f80fd5b5f806040838503121561294a575f80fd5b823561295581612925565b915060208301358015158114612969575f80fd5b809150509250929050565b5f60208284031215612984575f80fd5b813561298f81612925565b9392505050565b5f6101008201905062ffffff8084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525060c08301516129fb60c084018262ffffff169052565b5060e0830151612a1260e084018262ffffff169052565b5092915050565b8035600281900b81146127c4575f80fd5b5f805f805f60a08688031215612a3e575f80fd5b8535945060208601359350612a5560408701612a19565b9250612a6360608701612a19565b91506080860135612a73816127a9565b809150509295509295909350565b5f805f8060808587031215612a94575f80fd5b8435612a9f81612925565b966020860135965060408601359560600135945092505050565b5f67ffffffffffffffff821115612ad257612ad2612717565b5060051b60200190565b67ffffffffffffffff81168114611171575f80fd5b5f82601f830112612b00575f80fd5b81356020612b15612b1083612ab9565b612778565b82815260069290921b84018101918181019086841115612b33575f80fd5b8286015b84811015612b805760408189031215612b4e575f80fd5b612b56612755565b612b5f82612a19565b815284820135612b6e81612adc565b81860152835291830191604001612b37565b509695505050505050565b5f805f8060808587031215612b9e575f80fd5b8435612ba981612925565b935060208501359250604085013567ffffffffffffffff80821115612bcc575f80fd5b612bd888838901612af1565b93506060870135915080821115612bed575f80fd5b50612bfa87828801612af1565b91505092959194509250565b80516001600160c01b03811681146127c4575f80fd5b5f8060408385031215612c2d575f80fd5b612c3683612c06565b9150612c4460208401612c06565b90509250929050565b5f60c08284031215612c5d575f80fd5b60405160c0810181811067ffffffffffffffff82111715612c8057612c80612717565b6040528251612c8e81612925565b81526020830151612c9e81612adc565b60208201526040830151612cb181612925565b60408201526060830151612cc4816127a9565b60608201526080830151612cd781612925565b608082015260a0830151612cea816127a9565b60a08201529392505050565b5f60608284031215612d06575f80fd5b6040516060810181811067ffffffffffffffff82111715612d2957612d29612717565b80604052508091508251815260208301516020820152604083015160408201525092915050565b5f8060c08385031215612d61575f80fd5b612d6b8484612cf6565b9150612c448460608501612cf6565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761200657612006612d7a565b5f82612dbf57634e487b7160e01b5f52601260045260245ffd5b500490565b8082018082111561200657612006612d7a565b634e487b7160e01b5f52603260045260245ffd5b5f8160020b627fffff198103612e0357612e03612d7a565b5f0392915050565b8181038181111561200657612006612d7a565b600181815b80851115612e5857815f1904821115612e3e57612e3e612d7a565b80851615612e4b57918102915b93841c9390800290612e23565b509250929050565b5f82612e6e57506001612006565b81612e7a57505f612006565b8160018114612e905760028114612e9a57612eb6565b6001915050612006565b60ff841115612eab57612eab612d7a565b50506001821b612006565b5060208310610133831016604e8410600b8410161715612ed9575081810a612006565b612ee38383612e1e565b805f1904821115612ef657612ef6612d7a565b029392505050565b5f61298f60ff841683612e60565b5f60208284031215612f1c575f80fd5b815160ff8116811461298f575f80fd5b602080825282518282018190525f9190848201906040850190845b81811015612f6c5783516001600160a01b031683529284019291840191600101612f47565b50909695505050505050565b5f6020808385031215612f89575f80fd5b825167ffffffffffffffff811115612f9f575f80fd5b8301601f81018513612faf575f80fd5b8051612fbd612b1082612ab9565b81815260059190911b82018301908381019087831115612fdb575f80fd5b928401925b82841015612ff957835182529284019290840190612fe0565b979650505050505050565b60ff828116828216039081111561200657612006612d7a56fea26469706673582212201cd27d4b8fa50b7e29c291e1acb7ea478e25e792fb49f52c9989b159deb10dbe64736f6c63430008190033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "computeOrders(bytes32)": {
        "details": "Clears pool orders if an error occurs and retains current orders if the list is empty.",
        "params": {
          "key": "The key of the pool."
        },
        "returns": {
          "ordersA": "The orders for the first token.",
          "ordersB": "The orders for the second token."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "computeOrders(bytes32)": {
        "notice": "Retrieves the orders for a specified key."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 156,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5657,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "isOperator",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5662,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_configs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Config)7280_storage)"
      },
      {
        "astId": 5667,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_positions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(Position)7293_storage)"
      },
      {
        "astId": 5671,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_lastRawAmounts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Config)7280_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ISimpleOracleStrategy.Config)",
        "numberOfBytes": "32",
        "value": "t_struct(Config)7280_storage"
      },
      "t_mapping(t_bytes32,t_struct(Position)7293_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ISimpleOracleStrategy.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)7293_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Config)7280_storage": {
        "encoding": "inplace",
        "label": "struct ISimpleOracleStrategy.Config",
        "members": [
          {
            "astId": 7265,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "referenceThreshold",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7267,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "rebalanceThreshold",
            "offset": 3,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7269,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "rateA",
            "offset": 6,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7271,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "rateB",
            "offset": 9,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7273,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "minRateA",
            "offset": 12,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7275,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "minRateB",
            "offset": 15,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7277,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "priceThresholdA",
            "offset": 18,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7279,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "priceThresholdB",
            "offset": 21,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Position)7293_storage": {
        "encoding": "inplace",
        "label": "struct ISimpleOracleStrategy.Position",
        "members": [
          {
            "astId": 7282,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "paused",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7284,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "oraclePrice",
            "offset": 1,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 7286,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "rate",
            "offset": 17,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7289,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "tickA",
            "offset": 20,
            "slot": "0",
            "type": "t_userDefinedValueType(Tick)4855"
          },
          {
            "astId": 7292,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "tickB",
            "offset": 23,
            "slot": "0",
            "type": "t_userDefinedValueType(Tick)4855"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(Tick)4855": {
        "encoding": "inplace",
        "label": "Tick",
        "numberOfBytes": "3"
      }
    }
  }
}